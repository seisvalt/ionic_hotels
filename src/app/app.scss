// Media of at most the maximum breakpoint width. No query for the largest breakpoint.
// Makes the @content apply to the given breakpoint and narrower.
@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {
  $max: breakpoint-max($name, $breakpoints);
  @if $max {
    @media (max-width: $max) {
      @content;
    }
  } @else {
    @content;
  }
}


// Name of the next breakpoint, or null for the last breakpoint.
//
//    >> breakpoint-next(sm)
//    md
//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    md
//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))
//    md
@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {
  $n: index($breakpoint-names, $name);
  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);
}


// Maximum breakpoint width. Null for the largest (last) breakpoint.
// The maximum value is calculated as the minimum of the next one less 0.1.
//
//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    767px
@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {
  $next: breakpoint-next($name, $breakpoints);
  @return if($next, breakpoint-min($next, $breakpoints) - 1px, null);
}


// Creates text alignment classes based on screen size
// TODO this would be nice to add to the framework
@each $breakpoint in map-keys($grid-breakpoints) {
  $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

  @include media-breakpoint-up($breakpoint, $grid-breakpoints) {
    // Provide text `[text-{bp}]` attributes for aligning text based on screen size
    [text#{$infix}-center] {
      text-align: center;
    }

    [text#{$infix}-left] {
      text-align: left;
    }

    [text#{$infix}-right] {
      text-align: right;
    }

    [hidden#{$infix}-up] {
      display: none;
    }
  }

  @include media-breakpoint-down($breakpoint, $grid-breakpoints) {
    [hidden#{$infix}-down] {
      display: none;
    }
  }
}


/*custom is class added to ion-content*/

.custom {
  background-color: #f4f4f4 !important; /* This sets the background color*/
}

/*Set the background to transparent for ion-item*/
.custom .item {
  background-color: white;
  border:none;   /*Removes all borders*/
//  border-top: 0px solid;   /*Top Border for each menu item*/
 // border-bottom:0px solid;   /*Bottom border for each menu item*/
  border-color: #666;   /*Sets colors for top and bottom border*/
  color: black;    /*Text color for each item*/
}

/*Changes the border for the last item*/
.custom .item:last-child {
 // border-bottom: 1px solid #666;
}

.custom .item-complex .item-content, .dark .item-radio .item-content {
  background-color: transparent;
}

/*Just makes the type white*/
.custom h2,
.custom h3,
.custom p,
.custom a {
  //color: white;  /*Text color for each item, overrides the color property above*/
}

ion-list {
  margin: 10px !important;
}
.scroll-content {
  overflow-y: auto !important;
}


ion-icon[svgversion] {
 // content: url("../assets/img/filters/star.svg");
  mask-image: url("../assets/img/filters/star.svg");
  mask-repeat: no-repeat;
  padding: 2px 0px 3px;
  mask-size: contain;
  background: currentColor;
  width: 1em;
  height: 1em;
  color: #fdba12;
}


ion-title[svgversion] {
  content: url("../assets/img/logo-almundo.svg");
  z-index: 1000;
  //padding: 2px 0px 3px;
 // mask-size: contain;
  //background: currentColor;
 // width: 10em;
//  height: 8em;
  //color: white;
}

.split-pane-md.split-pane-visible > .split-pane-side {
  border-right: 0px;
}
